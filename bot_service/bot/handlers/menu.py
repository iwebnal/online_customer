from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


from services.db import get_products_by_category_name, get_all_categories, get_all_restaurants, \
    get_products_by_restaurant, get_user_by_telegram_id, create_user, create_order, update_user_phone
from utils.menu import send_main_menu
from .states import PhoneRequestStates

# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ FSMContext
CART_KEY = 'cart'
RESTAURANT_KEY = 'restaurant_id'
RESTAURANT_NAME = 'restaurant_name'
RESTAURANT_ADDRESS = 'restaurant_address'
CHOOSE_RESTAURANT_BTN = 'üè¢ –í—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –∫–∞—Ñ–µ'
MENU_BTN = '–ù–∞—à–µ –º–µ–Ω—é'

CONFIRM_ORDER_BTN = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'
MAIN_MENU_BTN = '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

choose_restaurant_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
choose_restaurant_keyboard.add(KeyboardButton(CHOOSE_RESTAURANT_BTN))

menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(KeyboardButton(MENU_BTN))


async def get_products_by_category(category_name):
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
    if '–ù–∞–ø–∏—Ç–∫–∏' in category_name:
        return [
            {'name': '–ö–∞–ø—É—á–∏–Ω–æ1', 'size': '250 –º–ª', 'price': 150},
            {'name': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ1', 'size': '250 –º–ª', 'price': 120},
        ]
    elif '–ó–∞–≤—Ç—Ä–∞–∫–∏' in category_name:
        return [
            {'name': '–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º1', 'size': '200 –≥', 'price': 250},
            {'name': '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è1', 'size': '300 –≥', 'price': 180},
        ]
    elif '–î–µ—Å–µ—Ä—Ç—ã' in category_name:
        return [
            {'name': '–ß–∏–∑–∫–µ–π–∫1', 'size': '120 –≥', 'price': 220},
            {'name': '–≠–∫–ª–µ—Ä1', 'size': '80 –≥', 'price': 90},
        ]
    else:
        return []


def register_menu_handlers(dp: Dispatcher):
    @dp.message_handler(commands=['start'])
    async def start_handler(message: types.Message, state: FSMContext):
        await state.update_data({RESTAURANT_KEY: None, RESTAURANT_NAME: None, RESTAURANT_ADDRESS: None})
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–∫—Ü–∏–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        welcome_text = (
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n'
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ, —É–∑–Ω–∞—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑üëá'
        )
        await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove())
        sales_text = (
            'üéâ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ\n\n'
            'üìå –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –¥–µ—Å–µ—Ä—Ç—ã!\n'
            '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–ª–∞–¥–æ—Å—Ç–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π. –ü–æ–±–∞–ª—É–π—Ç–µ —Å–µ–±—è!\n'
            '‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 23:59.\n\n'
            'üìå –ö–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É –æ—Ç 1500‚ÇΩ ‚Äî –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫!\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä, –Ω–∞–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1500‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n'
            '‚òï –í—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n'
            'üìå –°–µ—Ç "–ó–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –¥–≤–æ–∏—Ö" ‚Äî –∑–∞ 799‚ÇΩ –≤–º–µ—Å—Ç–æ 990‚ÇΩ!\n'
            '–û—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —É—Ç—Ä–∞ –≤–¥–≤–æ—ë–º.\n'
            'üì¶ –í –Ω–∞–ª–∏—á–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤!\n\n'
            'üîî –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
        )
        await message.answer(sales_text, reply_markup=ReplyKeyboardRemove())
        # –ó–∞—Ç–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == CHOOSE_RESTAURANT_BTN)
    async def choose_restaurant(message: types.Message, state: FSMContext):
        restaurants = await get_all_restaurants()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for r in restaurants:
            keyboard.add(f"{r.name} | {r.address}")
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–∞—Ñ–µ:', reply_markup=keyboard)

    @dp.message_handler(lambda m: '|' in m.text)
    async def select_restaurant(message: types.Message, state: FSMContext):
        name, address = [s.strip() for s in message.text.split('|', 1)]
        restaurants = await get_all_restaurants()
        for r in restaurants:
            if r.name == name and r.address == address:
                await state.update_data({RESTAURANT_KEY: r.id, RESTAURANT_NAME: r.name, RESTAURANT_ADDRESS: r.address})
                await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {r.name}\n–ê–¥—Ä–µ—Å: {r.address}', reply_markup=menu_keyboard)
                return
        await message.answer('–ö–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                             reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == MENU_BTN)
    async def show_menu(message: types.Message, state: FSMContext):
        data = await state.get_data()
        if not data.get(RESTAURANT_KEY):
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
            return
        restaurant_id = data.get(RESTAURANT_KEY)
        products = await get_products_by_restaurant(restaurant_id)
        categories = set(p.category.name for p in products if p.category)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for cat in categories:
            keyboard.add(cat)
        keyboard.add('üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        keyboard.add('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)

    @dp.message_handler(lambda m: m.text not in [MENU_BTN, '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                                                 CHOOSE_RESTAURANT_BTN, CONFIRM_ORDER_BTN] and '|' not in m.text)
    async def show_products_or_add_to_cart(message: types.Message, state: FSMContext):
        data = await state.get_data()
        restaurant_id = data.get(RESTAURANT_KEY)
        if not restaurant_id:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
            return
        products = await get_products_by_restaurant(restaurant_id)
        filtered = [p for p in products if p.category and p.category.name == message.text]
        if filtered:
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            for product in filtered:
                keyboard.add(product.name)
            keyboard.add('‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:', reply_markup=keyboard)
        else:
            async with state.proxy() as data:
                cart = data.get(CART_KEY, [])
                cart.append(message.text)
                data[CART_KEY] = cart
            await message.answer(f'–¢–æ–≤–∞—Ä "{message.text}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!')

    @dp.message_handler(lambda m: m.text == '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    async def back_to_categories(message: types.Message, state: FSMContext):
        data = await state.get_data()
        restaurant_id = data.get(RESTAURANT_KEY)
        if not restaurant_id:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        order_items = data.get('order_items')
        if order_items:
            # –ï—Å–ª–∏ –µ—Å—Ç—å order_items, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑
            # –∏ —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ - –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            async with state.proxy() as data:
                data[CART_KEY] = []
                data['order_items'] = []
                data['order_total'] = 0
                data['cart_message_id'] = None
            await state.update_data(order_items=[], order_total=0, cart_message_id=None)
            await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ:')
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = await get_products_by_restaurant(restaurant_id)
        categories = set(p.category.name for p in products if p.category)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for cat in categories:
            keyboard.add(cat)
        keyboard.add('üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        keyboard.add('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)

    @dp.message_handler(lambda m: m.text == '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    async def back_to_main_menu(message: types.Message, state: FSMContext):
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç—Ç–∞–ø—É
        await state.update_data({RESTAURANT_KEY: None, RESTAURANT_NAME: None, RESTAURANT_ADDRESS: None})
        async with state.proxy() as data:
            data[CART_KEY] = []
        await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == 'üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    async def show_cart(message: types.Message, state: FSMContext):
        data = await state.get_data()
        restaurant_name = data.get(RESTAURANT_NAME)
        restaurant_address = data.get(RESTAURANT_ADDRESS)
        async with state.proxy() as data:
            cart = data.get(CART_KEY, [])
        if not cart:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            return
        from collections import Counter
        items = Counter(cart)
        text = f'–í–∞—à –∑–∞–∫–∞–∑ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ {restaurant_name}\n–ê–¥—Ä–µ—Å: {restaurant_address}\n\n'
        total = 0
        products = await get_products_by_restaurant(data.get(RESTAURANT_KEY))
        product_map = {p.name: p for p in products}
        order_items = []
        for product_name, qty in items.items():
            product = product_map.get(product_name)
            if not product:
                price = 0
                discount_price = None
                product_id = None
            else:
                price = product.price
                discount_price = product.discount_price
                product_id = product.id
            price_to_show = discount_price or price
            text += f'{product_name} x{qty} ‚Äî {price_to_show}‚ÇΩ\n'
            if isinstance(price_to_show, (int, float)):
                total += price_to_show * qty
            if product_id:
                order_items.append({
                    'product_id': product_id,
                    'quantity': qty,
                    'price': price,
                    'discount_price': discount_price
                })
        text += f'\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ'
        # –ï—Å–ª–∏ –Ω–µ—Ç order_items, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if not order_items:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        confirm_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        confirm_keyboard.add(KeyboardButton(CONFIRM_ORDER_BTN))
        confirm_keyboard.add(KeyboardButton('‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        cart_message = await message.answer(text, reply_markup=confirm_keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_items, total –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            order_items=order_items, 
            order_total=total,
            cart_message_id=cart_message.message_id
        )

    @dp.message_handler(lambda m: m.text == CONFIRM_ORDER_BTN)
    async def confirm_order(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            restaurant_id = data.get(RESTAURANT_KEY)
            order_items = data.get('order_items', [])
            order_total = data.get('order_total', 0)
            
            if not restaurant_id or not order_items:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await get_user_by_telegram_id(str(message.from_user.id))
            if not user:
                user = await create_user(
                    telegram_id=str(message.from_user.id),
                    name=message.from_user.full_name
                )
            
            # –í–°–ï–ì–î–ê –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
            await request_phone_for_order(message, state, user, restaurant_id, order_items, order_total)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove()
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await state.update_data({RESTAURANT_KEY: None, RESTAURANT_NAME: None, RESTAURANT_ADDRESS: None})
            await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
    @dp.message_handler(content_types=['contact'], state=PhoneRequestStates.waiting_for_phone)
    async def handle_phone_contact(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        if message.contact and message.contact.user_id == message.from_user.id:
            phone = message.contact.phone_number
            await process_phone_number(message, state, phone)
        else:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.finish()
            await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", state=PhoneRequestStates.waiting_for_phone)
    async def request_manual_phone_input(message: types.Message, state: FSMContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        manual_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        manual_keyboard.add(KeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
        
        await message.answer(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX",
            reply_markup=manual_keyboard
        )

    @dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", state=PhoneRequestStates.waiting_for_phone)
    async def cancel_order(message: types.Message, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.finish()
        await state.update_data(
            cart=[],
            order_items=[],
            order_total=0,
            cart_message_id=None
        )
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text and m.text != "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", state=PhoneRequestStates.waiting_for_phone)
    async def handle_manual_phone(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone = message.text.strip()
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã
        clean_phone = ''.join(filter(str.isdigit, phone))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if len(clean_phone) == 11 and clean_phone.startswith('8'):
            # –§–æ—Ä–º–∞—Ç 8XXXXXXXXXX
            phone = '+7' + clean_phone[1:]
        elif len(clean_phone) == 11 and clean_phone.startswith('7'):
            # –§–æ—Ä–º–∞—Ç 7XXXXXXXXXX
            phone = '+7' + clean_phone[1:]
        elif len(clean_phone) == 10:
            # –§–æ—Ä–º–∞—Ç XXXXXXXXXX (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
            phone = '+7' + clean_phone
        elif len(clean_phone) == 12 and clean_phone.startswith('7'):
            # –§–æ—Ä–º–∞—Ç +7XXXXXXXXXX
            phone = '+' + clean_phone
        elif len(clean_phone) == 12 and clean_phone.startswith('8'):
            # –§–æ—Ä–º–∞—Ç +8XXXXXXXXXX (–º–µ–Ω—è–µ–º –Ω–∞ +7)
            phone = '+7' + clean_phone[1:]
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if len(phone) == 12 and phone.startswith('+7') and phone[2:].isdigit():
            await process_phone_number(message, state, phone)
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ +7XXXXXXXXXX\n"
                "‚Ä¢ 8XXXXXXXXXX\n"
                "‚Ä¢ 7XXXXXXXXXX\n"
                "‚Ä¢ XXXXXXXXXX"
            )

async def create_order_with_phone(message: types.Message, state: FSMContext, user, restaurant_id, order_items, order_total, phone):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order = await create_order(
            user_id=user.id,
            restaurant_id=restaurant_id,
            total=order_total,
            items=order_items,
            phone=phone
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        await state.update_data(
            cart=[],
            order_items=[],
            order_total=0,
            cart_message_id=None
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order_total}‚ÇΩ\n"
            f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {phone}, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            reply_markup=ReplyKeyboardRemove()
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—à–µ –º–µ–Ω—é" (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω)
        await message.answer('–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?', reply_markup=menu_keyboard)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )

async def request_phone_for_order(message: types.Message, state: FSMContext, user, restaurant_id, order_items, order_total):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        temp_order_data={
            'user_id': user.id,
            'restaurant_id': restaurant_id,
            'order_items': order_items,
            'order_total': order_total
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    phone_keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    phone_keyboard.add(KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))
    phone_keyboard.add(KeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
    
    await message.answer(
        f"üì± –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—É–º–º—É {order_total}‚ÇΩ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è:\n"
        "‚Ä¢ –°–≤—è–∑–∏ —Å –≤–∞–º–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é",
        reply_markup=phone_keyboard
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await PhoneRequestStates.waiting_for_phone.set()

async def process_phone_number(message: types.Message, state: FSMContext, phone: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        temp_order_data = data.get('temp_order_data')
        
        if not temp_order_data:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.finish()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await update_user_phone(str(message.from_user.id), phone)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await create_order_with_phone(
            message, 
            state, 
            user, 
            temp_order_data['restaurant_id'],
            temp_order_data['order_items'],
            temp_order_data['order_total'],
            phone
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.finish()
        await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
