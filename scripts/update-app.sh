#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/update-app.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
create_backup() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
    
    if [ -f "scripts/backup.sh" ]; then
        ./scripts/backup.sh backup
        log "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω ‚úì"
    else
        warn "–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
update_code() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if [ -n "$(git status --porcelain)" ]; then
        warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        git stash push -m "Backup before update $(date)"
        log "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stash"
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    git fetch origin
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    local current_commit=$(git rev-parse HEAD)
    local remote_commit=$(git rev-parse origin/main)
    
    if [ "$current_commit" = "$remote_commit" ]; then
        log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç ‚úì"
        return 1
    fi
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    git pull origin main
    
    log "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω ‚úì"
    return 0
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update_dependencies() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ requirements.txt
    if git diff HEAD~1 HEAD --name-only | grep -q "requirements.txt"; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ requirements.txt"
        log "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        
        # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        docker-compose -f docker-compose.prod.yml build admin
        
        log "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
    else
        log "–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –Ω–µ—Ç ‚úì"
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
update_config() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if git diff HEAD~1 HEAD --name-only | grep -q "nginx/"; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
        source .env.prod
        sed -i.bak "s/your-domain.com/$DOMAIN_NAME/g" nginx/conf.d/default.conf
        
        log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úì"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ docker-compose
    if git diff HEAD~1 HEAD --name-only | grep -q "docker-compose.prod.yml"; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ docker-compose.prod.yml"
        warn "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ docker-compose.prod.yml"
    fi
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
run_migrations() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    if [ -d "alembic" ]; then
        log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
        docker-compose -f docker-compose.prod.yml exec -T admin alembic upgrade head
        
        if [ $? -eq 0 ]; then
            log "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úì"
        else
            error "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
            exit 1
        fi
    else
        log "–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚úì"
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.prod.yml down
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.prod.yml up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 30
    
    log "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã ‚úì"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
verify_services() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    source .env.prod
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
    if curl -f -s http://localhost > /dev/null 2>&1; then
        log "Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì"
    else
        warn "Nginx –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if curl -f -s http://localhost/api/restaurants > /dev/null 2>&1; then
        log "API —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì"
    else
        warn "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if docker-compose -f docker-compose.prod.yml exec -T db pg_isready -U postgres > /dev/null 2>&1; then
        log "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì"
    else
        warn "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
    if curl -f -s https://$DOMAIN_NAME > /dev/null 2>&1; then
        log "HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì"
    else
        warn "HTTPS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
rollback() {
    log "–û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    
    # –û—Ç–∫–∞—Ç –∫–æ–¥–∞
    git reset --hard HEAD~1
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    restart_services
    
    log "–û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ‚úì"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    log "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo ""
    
    docker-compose -f docker-compose.prod.yml ps
    
    echo ""
    log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:"
    git log --oneline -5
    
    echo ""
    log "–°—Ç–∞—Ç—É—Å git:"
    git status --short
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-update}" in
        "update")
            log "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
            
            create_backup
            
            if update_code; then
                update_dependencies
                update_config
                run_migrations
                restart_services
                verify_services
                log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üéâ"
            else
                log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
                show_status
            fi
            ;;
        "rollback")
            rollback
            ;;
        "status")
            show_status
            ;;
        "restart")
            restart_services
            verify_services
            ;;
        "migrate")
            run_migrations
            ;;
        "backup")
            create_backup
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [update|rollback|status|restart|migrate|backup]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  update   - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  rollback - –û—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
            echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ git"
            echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
            echo "  migrate  - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"
            echo "  backup   - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
