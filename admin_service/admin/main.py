from fastapi import FastAPI, Request, Depends, HTTPException, status, Form, BackgroundTasks
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import uvicorn
from pathlib import Path
from starlette.middleware.sessions import SessionMiddleware
import os
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import joinedload

# –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º Telegram –º–æ–¥—É–ª—è
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
if os.path.exists('.env'):
    load_dotenv()

from admin_service.admin.routes import products, orders, discounts, restaurants, categories
from admin_service.admin.auth import login_user, logout_user, is_authenticated, require_auth
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from shared.database import get_db
from shared.models import Order, User, Restaurant, Product, Discount
from shared.config import settings

from shared.telegram.sender import send_order_to_telegram, get_telegram_sender

import asyncio

app = FastAPI(title="Online Customer Admin", version="1.0.0")

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
# –ù—É–∂–µ–Ω –¥–ª—è flash-—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.add_middleware(SessionMiddleware, secret_key=settings.SECRET_KEY.encode())

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
ADMIN_DIR = Path(__file__).resolve().parent

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory=ADMIN_DIR / "static"), name="static")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory=ADMIN_DIR / "templates")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(products.router, prefix="/admin", tags=["products"])
app.include_router(orders.router, prefix="/admin", tags=["orders"])
app.include_router(discounts.router, prefix="/admin", tags=["discounts"])
app.include_router(restaurants.router, prefix="/admin", tags=["restaurants"])
app.include_router(categories.router, prefix="/admin", tags=["categories"])


@app.get("/home", response_class=HTMLResponse)
async def admin_panel(request: Request, db: AsyncSession = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not is_authenticated(request):
        return RedirectResponse(url="/admin/login", status_code=302)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–∫–∞–∑–∞
    stmt = select(Order).options(
        joinedload(Order.user),
        joinedload(Order.restaurant)
    ).order_by(Order.created_at.desc()).limit(3)
    result = await db.execute(stmt)
    recent_orders = result.scalars().unique().all()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    restaurants_result = await db.execute(select(func.count(Restaurant.id)))
    restaurants_count = restaurants_result.scalar()

    products_result = await db.execute(select(func.count(Product.id)))
    products_count = products_result.scalar()

    orders_result = await db.execute(select(func.count(Order.id)))
    orders_count = orders_result.scalar()

    discounts_result = await db.execute(select(func.count(Discount.id)))
    discounts_count = discounts_result.scalar()

    users_result = await db.execute(select(func.count(User.id)))
    users_count = users_result.scalar()

    return templates.TemplateResponse("index.html", {
        "request": request,
        "recent_orders": recent_orders,
        "stats": {
            "restaurants": restaurants_count,
            "products": products_count,
            "orders": orders_count,
            "discounts": discounts_count,
            "users": users_count
        }
    })


@app.get("/admin/login", response_class=HTMLResponse)
async def login_page(request: Request):
    # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if is_authenticated(request):
        return RedirectResponse(url="/home", status_code=302)

    return templates.TemplateResponse("login.html", {"request": request})


@app.post("/admin/login", response_class=HTMLResponse)
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    if login_user(request, username, password):
        return RedirectResponse(url="/home", status_code=302)
    else:
        return templates.TemplateResponse("login.html", {
            "request": request,
            "error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        })


@app.get("/admin/logout")
async def logout(request: Request):
    logout_user(request)
    return RedirectResponse(url="/admin/login", status_code=302)


# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è Mini App
@app.get("/api/restaurants")
async def get_restaurants_api(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è Mini App"""
    stmt = select(Restaurant).order_by(Restaurant.name)
    result = await db.execute(stmt)
    restaurants = result.scalars().all()

    return {
        "restaurants": [
            {
                "id": r.id,
                "name": r.name,
                "address": r.address
            } for r in restaurants
        ]
    }


@app.get("/api/products")
async def get_products_api(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Mini App"""
    stmt = select(Product).options(
        joinedload(Product.category),
        joinedload(Product.restaurant)
    )
    result = await db.execute(stmt)
    products = result.scalars().unique().all()

    return {
        "products": [
            {
                "id": p.id,
                "name": p.name,
                "description": p.description or "",
                "price": p.price,
                "discount_price": p.discount_price,
                "size": p.size or "",
                "photo": p.photo or "",
                "is_available": p.is_available,
                "stock": p.stock,
                "category": {
                    "id": p.category.id if p.category else None,
                    "name": p.category.name if p.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                } if p.category else {"id": None, "name": "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"},
                "restaurant_id": p.restaurant_id
            } for p in products if p.is_available
        ]
    }


@app.get("/api/categories")
async def get_categories_api(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è Mini App"""
    from shared.models import Category
    stmt = select(Category)
    result = await db.execute(stmt)
    categories = result.scalars().all()

    return {
        "categories": [
            {
                "id": c.id,
                "name": c.name,
                "restaurant_id": c.restaurant_id
            } for c in categories
        ]
    }


def send_telegram_notification_sync(telegram_data: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    import logging
    logger = logging.getLogger(__name__)

    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –∑–∞–∫–∞–∑–∞ {telegram_data.get('order_id', 'unknown')}")

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(send_order_to_telegram(telegram_data))
            if result:
                logger.info(
                    f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {telegram_data.get('order_id', 'unknown')}")
            else:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∑–∞–∫–∞–∑–∞ {telegram_data.get('order_id', 'unknown')}")
            return result
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
        return False




@app.post("/api/orders")
async def create_order_api(order_data: dict, background_tasks: BackgroundTasks, db: AsyncSession = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ Mini App"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = None
        if order_data.get("user"):
            user_data = order_data["user"]
            stmt = select(User).where(User.telegram_id == str(user_data.get("id")))
            result = await db.execute(stmt)
            user = result.scalar_one_or_none()

            if not user:
                user = User(
                    telegram_id=str(user_data.get("id")),
                    name=f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
                    phone=order_data.get("phone", "")
                )
                db.add(user)
                await db.flush()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É ID –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        restaurant = None
        if order_data.get("restaurant_id"):
            stmt = select(Restaurant).where(Restaurant.id == order_data["restaurant_id"])
            result = await db.execute(stmt)
            restaurant = result.scalar_one_or_none()

        # –ï—Å–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if not restaurant:
            stmt = select(Restaurant).order_by(Restaurant.id)
            result = await db.execute(stmt)
            restaurant = result.scalars().first()

        if not restaurant:
            return {
                "status": "error",
                "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"
            }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            user_id=user.id if user else None,
            restaurant_id=restaurant.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
            status="new",
            total=order_data.get("totalSum", 0),
            phone=order_data.get("phone", "")
        )
        db.add(order)
        await db.flush()

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        for item in order_data.get("order", []):
            from shared.models import OrderItem
            order_item = OrderItem(
                order_id=order.id,
                product_id=item.get("id"),
                quantity=item.get("qty", 1),
                price=item.get("price", 0)
            )
            db.add(order_item)

        await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            order_items_with_products = []
            for item in order_data.get("order", []):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                product_stmt = select(Product).where(Product.id == item.get("id"))
                product_result = await db.execute(product_stmt)
                product = product_result.scalar_one_or_none()
                
                if product:
                    order_items_with_products.append({
                        "id": product.id,
                        "name": product.name,
                        "qty": item.get("qty", 1),
                        "price": item.get("price", 0)
                    })
                else:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
                    order_items_with_products.append({
                        "id": item.get("id"),
                        "name": item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"),
                        "qty": item.get("qty", 1),
                        "price": item.get("price", 0)
                    })

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            telegram_data = {
                "order_id": order.id,
                "user": order_data.get("user"),
                "address": order_data.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "order": order_items_with_products,
                "totalSum": order_data.get("totalSum", 0),
                "timestamp": order_data.get("timestamp"),
                "restaurant_id": restaurant.id
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
            background_tasks.add_task(send_telegram_notification_sync, telegram_data)

        except Exception as telegram_error:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {telegram_error}")

        return {
            "status": "success",
            "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "order_id": order.id
        }

    except Exception as e:
        await db.rollback()
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}"
        }


@app.post("/api/telegram/test")
async def test_telegram():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        sender = get_telegram_sender()
        success = await sender.send_test_message()

        if success:
            return {
                "status": "success",
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
            }
        else:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            }
    except Exception as e:
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {str(e)}"
        }


@app.get("/products/{product_id}")
async def get_product(product_id: int, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID"""
    result = await db.execute(select(Product).where(Product.id == product_id))
    product = result.scalar_one_or_none()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    return product


@app.get("/api/orders")
async def get_orders(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    stmt = select(Order).options(
        joinedload(Order.user),
        joinedload(Order.restaurant)
    ).order_by(Order.created_at.desc())
    result = await db.execute(stmt)
    orders = result.scalars().unique().all()
    return orders


if __name__ == "__main__":
    uvicorn.run(app, host=settings.HOST, port=settings.ADMIN_PORT)
