from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


from bot.services.db import get_products_by_category_name, get_all_categories, get_all_restaurants, \
    get_products_by_restaurant, get_user_by_telegram_id, create_user, create_order
from bot.utils.menu import send_main_menu

# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ FSMContext
CART_KEY = 'cart'
RESTAURANT_KEY = 'restaurant_id'
RESTAURANT_NAME = 'restaurant_name'
RESTAURANT_ADDRESS = 'restaurant_address'
CHOOSE_RESTAURANT_BTN = 'üè¢ –í—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω'
MENU_BTN = '–ù–∞—à–µ –º–µ–Ω—é'

CONFIRM_ORDER_BTN = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'
MAIN_MENU_BTN = '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  # ADDED

choose_restaurant_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
choose_restaurant_keyboard.add(KeyboardButton(CHOOSE_RESTAURANT_BTN))

menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(KeyboardButton(MENU_BTN))


async def get_products_by_category(category_name):
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
    if '–ù–∞–ø–∏—Ç–∫–∏' in category_name:
        return [
            {'name': '–ö–∞–ø—É—á–∏–Ω–æ1', 'size': '250 –º–ª', 'price': 150},
            {'name': '–ê–º–µ—Ä–∏–∫–∞–Ω–æ1', 'size': '250 –º–ª', 'price': 120},
        ]
    elif '–ó–∞–≤—Ç—Ä–∞–∫–∏' in category_name:
        return [
            {'name': '–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º1', 'size': '200 –≥', 'price': 250},
            {'name': '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è1', 'size': '300 –≥', 'price': 180},
        ]
    elif '–î–µ—Å–µ—Ä—Ç—ã' in category_name:
        return [
            {'name': '–ß–∏–∑–∫–µ–π–∫1', 'size': '120 –≥', 'price': 220},
            {'name': '–≠–∫–ª–µ—Ä1', 'size': '80 –≥', 'price': 90},
        ]
    else:
        return []


def register_menu_handlers(dp: Dispatcher):
    @dp.message_handler(commands=['start'])
    async def start_handler(message: types.Message, state: FSMContext):
        await state.update_data({RESTAURANT_KEY: None, RESTAURANT_NAME: None, RESTAURANT_ADDRESS: None})
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–∫—Ü–∏–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        welcome_text = (
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n'
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ, —É–∑–Ω–∞—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑üëá'
        )
        await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove())
        sales_text = (
            'üéâ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üéâ\n\n'
            'üìå –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –¥–µ—Å–µ—Ä—Ç—ã!\n'
            '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–ª–∞–¥–æ—Å—Ç–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π. –ü–æ–±–∞–ª—É–π—Ç–µ —Å–µ–±—è!\n'
            '‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 23:59.\n\n'
            'üìå –ö–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É –æ—Ç 1500‚ÇΩ ‚Äî –Ω–∞–ø–∏—Ç–æ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫!\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä, –Ω–∞–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ—Ç 1500‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n'
            '‚òï –í—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n'
            'üìå –°–µ—Ç "–ó–∞–≤—Ç—Ä–∞–∫ –¥–ª—è –¥–≤–æ–∏—Ö" ‚Äî –∑–∞ 799‚ÇΩ –≤–º–µ—Å—Ç–æ 990‚ÇΩ!\n'
            '–û—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —É—Ç—Ä–∞ –≤–¥–≤–æ—ë–º.\n'
            'üì¶ –í –Ω–∞–ª–∏—á–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤!\n\n'
            'üîî –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
        )
        await message.answer(sales_text, reply_markup=ReplyKeyboardRemove())
        # –ó–∞—Ç–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == CHOOSE_RESTAURANT_BTN)
    async def choose_restaurant(message: types.Message, state: FSMContext):
        restaurants = await get_all_restaurants()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for r in restaurants:
            keyboard.add(f"{r.name} | {r.address}")
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=keyboard)

    @dp.message_handler(lambda m: '|' in m.text)
    async def select_restaurant(message: types.Message, state: FSMContext):
        name, address = [s.strip() for s in message.text.split('|', 1)]
        restaurants = await get_all_restaurants()
        for r in restaurants:
            if r.name == name and r.address == address:
                await state.update_data({RESTAURANT_KEY: r.id, RESTAURANT_NAME: r.name, RESTAURANT_ADDRESS: r.address})
                await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {r.name}\n–ê–¥—Ä–µ—Å: {r.address}', reply_markup=menu_keyboard)
                return
        await message.answer('–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.',
                             reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == MENU_BTN)
    async def show_menu(message: types.Message, state: FSMContext):
        data = await state.get_data()
        if not data.get(RESTAURANT_KEY):
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
            return
        restaurant_id = data.get(RESTAURANT_KEY)
        products = await get_products_by_restaurant(restaurant_id)
        categories = set(p.category.name for p in products if p.category)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for cat in categories:
            keyboard.add(cat)
        keyboard.add('üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        keyboard.add('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)

    @dp.message_handler(lambda m: m.text not in [MENU_BTN, '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                                                 CHOOSE_RESTAURANT_BTN] and '|' not in m.text)
    async def show_products_or_add_to_cart(message: types.Message, state: FSMContext):
        data = await state.get_data()
        restaurant_id = data.get(RESTAURANT_KEY)
        if not restaurant_id:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
            return
        products = await get_products_by_restaurant(restaurant_id)
        filtered = [p for p in products if p.category and p.category.name == message.text]
        if filtered:
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            for product in filtered:
                keyboard.add(product.name)
            keyboard.add('‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:', reply_markup=keyboard)
        else:
            async with state.proxy() as data:
                cart = data.get(CART_KEY, [])
                cart.append(message.text)
                data[CART_KEY] = cart
            await message.answer(f'–¢–æ–≤–∞—Ä "{message.text}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!')

    @dp.message_handler(lambda m: m.text == '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    async def back_to_categories(message: types.Message, state: FSMContext):
        data = await state.get_data()
        restaurant_id = data.get(RESTAURANT_KEY)
        if not restaurant_id:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)
            return
        products = await get_products_by_restaurant(restaurant_id)
        categories = set(p.category.name for p in products if p.category)
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for cat in categories:
            keyboard.add(cat)
        keyboard.add('üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        keyboard.add('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)

    @dp.message_handler(lambda m: m.text == '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    async def back_to_main_menu(message: types.Message, state: FSMContext):
        await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:', reply_markup=choose_restaurant_keyboard)

    @dp.message_handler(lambda m: m.text == 'üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    async def show_cart(message: types.Message, state: FSMContext):
        data = await state.get_data()
        restaurant_name = data.get(RESTAURANT_NAME)
        restaurant_address = data.get(RESTAURANT_ADDRESS)
        async with state.proxy() as data:
            cart = data.get(CART_KEY, [])
        if not cart:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            return
        from collections import Counter
        items = Counter(cart)
        text = f'–í–∞—à –∑–∞–∫–∞–∑ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ {restaurant_name}\n–ê–¥—Ä–µ—Å: {restaurant_address}\n\n'
        total = 0
        products = await get_products_by_restaurant(data.get(RESTAURANT_KEY))
        product_map = {p.name: p for p in products}
        order_items = []
        for product_name, qty in items.items():
            product = product_map.get(product_name)
            if not product:
                price = 0
                discount_price = None
                product_id = None
            else:
                price = product.price
                discount_price = product.discount_price
                product_id = product.id
            price_to_show = discount_price or price
            text += f'{product_name} x{qty} ‚Äî {price_to_show}‚ÇΩ\n'
            if isinstance(price_to_show, (int, float)):
                total += price_to_show * qty
            if product_id:
                order_items.append({
                    'product_id': product_id,
                    'quantity': qty,
                    'price': price,
                    'discount_price': discount_price
                })
        text += f'\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ'
        # –ï—Å–ª–∏ –Ω–µ—Ç order_items, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if not order_items:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            return
        await message.answer(text, reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(CONFIRM_ORDER_BTN))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_items –∏ total –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(order_items=order_items, order_total=total)

    @dp.message_handler(lambda m: m.text == CONFIRM_ORDER_BTN)
    async def confirm_order(message: types.Message, state: FSMContext):
        data = await state.get_data()
        order_items = data.get('order_items', [])
        total = data.get('order_total', 0)
        restaurant_id = data.get(RESTAURANT_KEY)
        if not order_items or not restaurant_id:
            await message.answer('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                                 reply_markup=ReplyKeyboardRemove())
            return

        telegram_id = str(message.from_user.id)
        user = await get_user_by_telegram_id(telegram_id)
        if not user:
            user = await create_user(telegram_id=telegram_id, name=message.from_user.full_name)
        order = await create_order(user_id=user.id, restaurant_id=restaurant_id, total=total, items=order_items)

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        async with state.proxy() as data:
            data[CART_KEY] = []
            data['order_items'] = []
            data['order_total'] = 0
        await state.update_data(order_items=[], order_total=0)

        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–≤–∏–∑—É–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        await message.answer(
            f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!',
            reply_markup=ReplyKeyboardRemove()
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
        await start_handler(message, state)

    @dp.message_handler(lambda m: m.text == '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    async def go_to_main_menu(message: types.Message, state: FSMContext):
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await send_main_menu(message)
