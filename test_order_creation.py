#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(__file__))

from bot.services.db import (
    get_all_restaurants, 
    get_products_by_restaurant, 
    get_user_by_telegram_id, 
    create_user, 
    create_order
)

async def test_order_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    restaurants = await get_all_restaurants()
    if not restaurants:
        print("‚ùå –ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    restaurant = restaurants[0]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name} (ID: {restaurant.id})")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    products = await get_products_by_restaurant(restaurant.id)
    if not products:
        print("‚ùå –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
    
    # 3. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_telegram_id = "123456789"
    user = await get_user_by_telegram_id(test_telegram_id)
    if not user:
        user = await create_user(telegram_id=test_telegram_id, name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name} (ID: {user.id})")
    else:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name} (ID: {user.id})")
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    test_items = []
    total = 0
    
    for product in products[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–æ–¥—É–∫—Ç–∞
        price = product.discount_price or product.price
        test_items.append({
            'product_id': product.id,
            'quantity': 2,
            'price': product.price,
            'discount_price': product.discount_price
        })
        total += price * 2
    
    print(f"‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É: {total}‚ÇΩ")
    print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(test_items)}")
    
    # 5. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        order = await create_order(
            user_id=user.id,
            restaurant_id=restaurant.id,
            total=total,
            items=test_items
        )
        print(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID –∑–∞–∫–∞–∑–∞: {order.id}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status}")
        print(f"‚úÖ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total}‚ÇΩ")
        print(f"‚úÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –∑–∞–∫–∞–∑–∞
        print("\nüìã –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:")
        for item in order.items:
            print(f"  - {item.product.name} x{item.quantity} = {item.price}‚ÇΩ")
            if item.discount_price:
                print(f"    (—Å–æ —Å–∫–∏–¥–∫–æ–π: {item.discount_price}‚ÇΩ)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_order_creation())
