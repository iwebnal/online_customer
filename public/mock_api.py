#!/usr/bin/env python3
"""
Mock API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Mini App (–∑–∞–º–µ–Ω—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
"""

import json
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import os

class MockAPIHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urlparse(self.path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_cors_headers()
        
        if parsed_path.path == "/api/restaurants":
            self.send_restaurants()
        elif parsed_path.path == "/api/products":
            self.send_products()
        elif parsed_path.path == "/api/categories":
            self.send_categories()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        parsed_path = urlparse(self.path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_cors_headers()
        
        if parsed_path.path == "/api/orders":
            self.create_order()
        else:
            self.send_error(404, "Not Found")
    
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_cors_headers()
        self.send_response(200)
        self.end_headers()
    
    def send_cors_headers(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.send_header('Content-Type', 'application/json')
    
    def send_restaurants(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö"""
        restaurants = {
            "restaurants": [
                {
                    "id": 1,
                    "name": "You Coffee (Nalchik)",
                    "address": "–≥. –ù–∞–ª—å—á–∏–∫, —É–ª. –ö–∞–±–∞—Ä–¥–∏–Ω—Å–∫–∞—è, 25"
                },
                {
                    "id": 2,
                    "name": "Coffee House (Moscow)",
                    "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, 15"
                }
            ]
        }
        self.end_headers()
        self.wfile.write(json.dumps(restaurants, ensure_ascii=False).encode('utf-8'))
    
    def send_products(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
        products = {
            "products": [
                {
                    "id": 1,
                    "name": "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
                    "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–µ—Ä–Ω—ã–π –∫–æ—Ñ–µ 250 –º–ª",
                    "price": 150,
                    "discount_price": None,
                    "size": "250 –º–ª",
                    "photo": "",
                    "is_available": True,
                    "stock": 100,
                    "category": {"id": 1, "name": "–ù–∞–ø–∏—Ç–∫–∏"},
                    "restaurant_id": 1
                },
                {
                    "id": 2,
                    "name": "–ö–∞–ø—É—á–∏–Ω–æ",
                    "description": "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º –∏ –ø–µ–Ω–∫–æ–π 300 –º–ª",
                    "price": 210,
                    "discount_price": 190,
                    "size": "300 –º–ª",
                    "photo": "",
                    "is_available": True,
                    "stock": 80,
                    "category": {"id": 1, "name": "–ù–∞–ø–∏—Ç–∫–∏"},
                    "restaurant_id": 1
                },
                {
                    "id": 3,
                    "name": "–õ–∞—Ç—Ç–µ",
                    "description": "–ù–µ–∂–Ω—ã–π –ª–∞—Ç—Ç–µ —Å –º–æ–ª–æ–∫–æ–º 300 –º–ª",
                    "price": 230,
                    "discount_price": None,
                    "size": "300 –º–ª",
                    "photo": "",
                    "is_available": True,
                    "stock": 60,
                    "category": {"id": 1, "name": "–ù–∞–ø–∏—Ç–∫–∏"},
                    "restaurant_id": 1
                },
                {
                    "id": 4,
                    "name": "–ö—Ä—É–∞—Å—Å–∞–Ω",
                    "description": "–°–ª–∏–≤–æ—á–Ω—ã–π –∫—Ä—É–∞—Å—Å–∞–Ω, —Å–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞",
                    "price": 180,
                    "discount_price": None,
                    "size": "1 —à—Ç",
                    "photo": "",
                    "is_available": True,
                    "stock": 40,
                    "category": {"id": 2, "name": "–í—ã–ø–µ—á–∫–∞"},
                    "restaurant_id": 1
                },
                {
                    "id": 5,
                    "name": "–ß–∏–∑–∫–µ–π–∫",
                    "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ù—å—é-–ô–æ—Ä–∫ —á–∏–∑–∫–µ–π–∫",
                    "price": 260,
                    "discount_price": 240,
                    "size": "1 –ø–æ—Ä—Ü–∏—è",
                    "photo": "",
                    "is_available": True,
                    "stock": 20,
                    "category": {"id": 3, "name": "–î–µ—Å–µ—Ä—Ç—ã"},
                    "restaurant_id": 1
                }
            ]
        }
        self.end_headers()
        self.wfile.write(json.dumps(products, ensure_ascii=False).encode('utf-8'))
    
    def send_categories(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
        categories = {
            "categories": [
                {"id": 1, "name": "–ù–∞–ø–∏—Ç–∫–∏", "restaurant_id": 1},
                {"id": 2, "name": "–í—ã–ø–µ—á–∫–∞", "restaurant_id": 1},
                {"id": 3, "name": "–î–µ—Å–µ—Ä—Ç—ã", "restaurant_id": 1}
            ]
        }
        self.end_headers()
        self.wfile.write(json.dumps(categories, ensure_ascii=False).encode('utf-8'))
    
    def create_order(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.rfile.read(content_length)
        
        try:
            order_data = json.loads(post_data.decode('utf-8'))
            print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {order_data}")
            
            response = {
                "status": "success",
                "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                "order_id": 12345
            }
        except Exception as e:
            response = {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}"
            }
        
        self.end_headers()
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞"""
        pass

def main():
    port = 8000
    server = HTTPServer(('localhost', port), MockAPIHandler)
    print(f"üöÄ Mock API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{port}")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   GET  /api/restaurants")
    print("   GET  /api/products")
    print("   GET  /api/categories")
    print("   POST /api/orders")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Mock API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        server.shutdown()

if __name__ == "__main__":
    main()
